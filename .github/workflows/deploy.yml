name: 🚀 Auto Deploy to All Channels

on:
  push:
    branches: [ latest ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Job 1: Calculate new version and prepare release
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Get Latest Version
        id: get_version
        run: |
          # Get the latest tag, fallback to 1.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: 🔢 Calculate New Version
        id: version
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          VERSION_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
          
          # Remove 'v' prefix if present
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-1}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Calculate new version based on type
          case $VERSION_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          VERSION_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Version tag: $VERSION_TAG"

  # Job 2: Build binaries for all platforms
  build:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🔨 Build Binary
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags="-s -w -X main.version=${{ needs.version.outputs.new_version }}" \
            -o dist/codegenius-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
            .

      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/

  # Job 3: Create GitHub Release
  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.release.outputs.html_url }}
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist/

      - name: 🔐 Generate SHA256 Checksums
        run: |
          cd dist/
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # 🚀 CodeGenius CLI ${{ needs.version.outputs.new_version }}
          
          ## 🎯 **Auto-Generated Release**
          
          This release was automatically generated by our CI/CD pipeline.
          
          ## 📦 **Installation Methods**
          
          ### 🍺 **Homebrew** (Recommended for macOS/Linux)
          ```bash
          brew tap Shubhpreet-Rana/codegenius
          brew install codegenius
          ```
          
          ### 📦 **NPM** (Cross-platform)
          ```bash
          npm install -g codegenius-cli
          ```
          
          ### 🌐 **One-Line Install**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/Shubhpreet-Rana/codegenius/latest/install.sh | bash
          ```
          
          ### 🔧 **Go Install**
          ```bash
          go install github.com/Shubhpreet-Rana/codegenius@latest
          ```
          
          ## 🔐 **SHA256 Checksums**
          ```
          $(cat dist/checksums.txt)
          ```
          
          ## 🎉 **What's New**
          - Automated release and deployment pipeline
          - Updated binaries for all supported platforms
          - Enhanced installation methods
          
          ---
          **🤖 This release was automatically generated on $(date)**
          EOF

      - name: 🚀 Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version_tag }}
          release_name: "CodeGenius CLI ${{ needs.version.outputs.new_version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: 📎 Upload Release Assets
        run: |
          for file in dist/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              curl \
                -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.release.outputs.upload_url }}?name=$(basename $file)"
            fi
          done

  # Job 4: Update and Deploy NPM Package
  deploy-npm:
    needs: [version, release]
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist/

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 🔄 Update Package Version
        run: |
          # Update package.json version
          npm version ${{ needs.version.outputs.new_version }} --no-git-tag-version
          
          # Copy the appropriate binary to bin/
          cp dist/codegenius-linux-amd64 bin/codegenius
          chmod +x bin/codegenius
          
          # Copy Windows binary
          cp dist/codegenius-windows-amd64.exe bin/codegenius-windows-amd64.exe
          
          # Ensure lib/index.js exists
          mkdir -p lib
          echo 'module.exports = require("../bin/codegenius.js");' > lib/index.js

      - name: 🚀 Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 5: Update Homebrew Formula
  deploy-homebrew:
    needs: [version, release]
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist/

      - name: 🔐 Calculate SHA256 Hashes
        id: hashes
        run: |
          echo "darwin_amd64=$(sha256sum dist/codegenius-darwin-amd64 | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "darwin_arm64=$(sha256sum dist/codegenius-darwin-arm64 | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "linux_amd64=$(sha256sum dist/codegenius-linux-amd64 | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "linux_arm64=$(sha256sum dist/codegenius-linux-arm64 | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: 🍺 Update Homebrew Formula
        run: |
          # Update the main repository formula
          cat > Formula/codegenius.rb << 'EOF'
          class Codegenius < Formula
            desc "AI-powered Git commit message generator and code reviewer with beautiful TUI"
            homepage "https://github.com/Shubhpreet-Rana/codegenius"
            version "${{ needs.version.outputs.new_version }}"
            license "MIT"

            if OS.mac?
              if Hardware::CPU.arm?
                url "https://github.com/Shubhpreet-Rana/codegenius/releases/download/${{ needs.version.outputs.version_tag }}/codegenius-darwin-arm64"
                sha256 "${{ steps.hashes.outputs.darwin_arm64 }}"
              else
                url "https://github.com/Shubhpreet-Rana/codegenius/releases/download/${{ needs.version.outputs.version_tag }}/codegenius-darwin-amd64"
                sha256 "${{ steps.hashes.outputs.darwin_amd64 }}"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "https://github.com/Shubhpreet-Rana/codegenius/releases/download/${{ needs.version.outputs.version_tag }}/codegenius-linux-arm64"
                sha256 "${{ steps.hashes.outputs.linux_arm64 }}"
              else
                url "https://github.com/Shubhpreet-Rana/codegenius/releases/download/${{ needs.version.outputs.version_tag }}/codegenius-linux-amd64"
                sha256 "${{ steps.hashes.outputs.linux_amd64 }}"
              end
            end

            def install
              bin.install Dir["codegenius*"].first => "codegenius"
            end

            def caveats
              <<~EOS
                🤖 CodeGenius CLI installed successfully via Homebrew!

                ✅ CodeGenius is ready to use globally!
                🚀 Try it now: codegenius --tui

                📋 Next steps:
                1. Get your Gemini API key: https://makersuite.google.com/app/apikey
                2. Set environment variable:
                   export GEMINI_API_KEY="your-api-key-here"
                3. Add to your shell profile (~/.zshrc, ~/.bashrc, etc.)
                4. Initialize in any Git repository:
                   cd your-project && codegenius --init
                5. Start using CodeGenius:
                   codegenius --tui

                💡 Quick commands:
                   codegenius --help     # Show help
                   codegenius --tui      # Beautiful interface  
                   codegenius --review   # Code review

                🔗 Documentation: https://github.com/Shubhpreet-Rana/codegenius#readme
              EOS
            end

            test do
              assert_predicate bin/"codegenius", :exist?
              assert_predicate bin/"codegenius", :executable?
              output = shell_output("#{bin}/codegenius --help")
              assert_match "CodeGenius CLI", output
            end
          end
          EOF

      - name: 🛎️ Checkout Homebrew Tap
        uses: actions/checkout@v4
        with:
          repository: Shubhpreet-Rana/homebrew-codegenius
          token: ${{ secrets.TAP_GITHUB_TOKEN }}
          path: homebrew-tap

      - name: 🔄 Update Tap Formula
        run: |
          cp Formula/codegenius.rb homebrew-tap/Formula/
          cd homebrew-tap
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/codegenius.rb
          git commit -m "chore: update CodeGenius to ${{ needs.version.outputs.new_version }}

          - Updated formula for version ${{ needs.version.outputs.new_version }}
          - New SHA256 hashes from automated build
          - Release: ${{ needs.release.outputs.release_url }}"
          git push

  # Job 6: Update Curl Installer
  deploy-curl:
    needs: [version, release]
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4

      - name: 🔄 Update Install Script Version
        run: |
          # Update version in install.sh
          sed -i 's/LATEST_VERSION=".*"/LATEST_VERSION="${{ needs.version.outputs.version_tag }}"/' install.sh || true

      - name: 📝 Commit Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add install.sh Formula/codegenius.rb
          git commit -m "chore: auto-update to version ${{ needs.version.outputs.new_version }}

          🚀 Automated release deployment:
          - Updated install.sh version reference
          - Updated Homebrew formula with new SHA256 hashes
          - Released binaries for all platforms
          - NPM package updated and published

          📦 Installation methods:
          - Homebrew: brew tap Shubhpreet-Rana/codegenius && brew install codegenius
          - NPM: npm install -g codegenius-cli
          - Curl: curl -fsSL https://raw.githubusercontent.com/.../install.sh | bash
          - Go: go install github.com/Shubhpreet-Rana/codegenius@latest

          🔗 Release: ${{ needs.release.outputs.release_url }}" || echo "No changes to commit"
          git push || echo "Nothing to push"

  # Job 7: Deployment Summary
  summary:
    needs: [version, release, deploy-npm, deploy-homebrew, deploy-curl]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 🎉 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary for ${{ needs.version.outputs.new_version }}"
          echo ""
          echo "| Component | Status | Details |"
          echo "|-----------|--------|---------|"
          echo "| **GitHub Release** | ✅ Success | ${{ needs.release.outputs.release_url }} |"
          echo "| **NPM Package** | ${{ needs.deploy-npm.result == 'success' && '✅ Success' || '❌ Failed' }} | \`codegenius-cli@${{ needs.version.outputs.new_version }}\` |"
          echo "| **Homebrew Formula** | ${{ needs.deploy-homebrew.result == 'success' && '✅ Success' || '❌ Failed' }} | Updated tap repository |"
          echo "| **Curl Installer** | ${{ needs.deploy-curl.result == 'success' && '✅ Success' || '❌ Failed' }} | Updated install.sh |"
          echo ""
          echo "🎯 **Installation Commands:**"
          echo "\`\`\`bash"
          echo "# Homebrew"
          echo "brew tap Shubhpreet-Rana/codegenius && brew install codegenius"
          echo ""
          echo "# NPM"
          echo "npm install -g codegenius-cli"
          echo ""
          echo "# Curl"
          echo "curl -fsSL https://raw.githubusercontent.com/Shubhpreet-Rana/codegenius/latest/install.sh | bash"
          echo "\`\`\`" 